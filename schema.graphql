# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  department: String
  jobTitle: String
  role: Role
  manager: User
  reports(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  reportsCount(where: UserWhereInput! = {}): Int
  isActive: Boolean
  lastLogin: DateTime
  createdContent(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  createdContentCount(where: ContentWhereInput! = {}): Int
  uploadedAssets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  uploadedAssetsCount(where: AssetWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  department: StringFilter
  jobTitle: StringFilter
  role: RoleWhereInput
  manager: UserWhereInput
  reports: UserManyRelationFilter
  isActive: BooleanFilter
  lastLogin: DateTimeNullableFilter
  createdContent: ContentManyRelationFilter
  uploadedAssets: AssetManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ContentManyRelationFilter {
  every: ContentWhereInput
  some: ContentWhereInput
  none: ContentWhereInput
}

input AssetManyRelationFilter {
  every: AssetWhereInput
  some: AssetWhereInput
  none: AssetWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  department: OrderDirection
  jobTitle: OrderDirection
  isActive: OrderDirection
  lastLogin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  department: String
  jobTitle: String
  role: RoleRelateToOneForUpdateInput
  manager: UserRelateToOneForUpdateInput
  reports: UserRelateToManyForUpdateInput
  isActive: Boolean
  lastLogin: DateTime
  createdContent: ContentRelateToManyForUpdateInput
  uploadedAssets: AssetRelateToManyForUpdateInput
  createdAt: DateTime
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ContentRelateToManyForUpdateInput {
  disconnect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

input AssetRelateToManyForUpdateInput {
  disconnect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  department: String
  jobTitle: String
  role: RoleRelateToOneForCreateInput
  manager: UserRelateToOneForCreateInput
  reports: UserRelateToManyForCreateInput
  isActive: Boolean
  lastLogin: DateTime
  createdContent: ContentRelateToManyForCreateInput
  uploadedAssets: AssetRelateToManyForCreateInput
  createdAt: DateTime
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
}

input ContentRelateToManyForCreateInput {
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
}

input AssetRelateToManyForCreateInput {
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  description: String
  canCreateContent: Boolean
  canEditAllContent: Boolean
  canPublishContent: Boolean
  canDeleteContent: Boolean
  canUploadAssets: Boolean
  canEditAllAssets: Boolean
  canApproveAssets: Boolean
  canDeleteAssets: Boolean
  canManageBrands: Boolean
  canEditBrandGuidelines: Boolean
  canApproveForBrand: Boolean
  canManageUsers: Boolean
  canAssignRoles: Boolean
  canViewAnalytics: Boolean
  canAccessAdminUI: Boolean
  canManageSystem: Boolean
  canViewAuditLogs: Boolean
  assignedUsers(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  assignedUsersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  canCreateContent: BooleanFilter
  canEditAllContent: BooleanFilter
  canPublishContent: BooleanFilter
  canDeleteContent: BooleanFilter
  canUploadAssets: BooleanFilter
  canEditAllAssets: BooleanFilter
  canApproveAssets: BooleanFilter
  canDeleteAssets: BooleanFilter
  canManageBrands: BooleanFilter
  canEditBrandGuidelines: BooleanFilter
  canApproveForBrand: BooleanFilter
  canManageUsers: BooleanFilter
  canAssignRoles: BooleanFilter
  canViewAnalytics: BooleanFilter
  canAccessAdminUI: BooleanFilter
  canManageSystem: BooleanFilter
  canViewAuditLogs: BooleanFilter
  assignedUsers: UserManyRelationFilter
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  canCreateContent: OrderDirection
  canEditAllContent: OrderDirection
  canPublishContent: OrderDirection
  canDeleteContent: OrderDirection
  canUploadAssets: OrderDirection
  canEditAllAssets: OrderDirection
  canApproveAssets: OrderDirection
  canDeleteAssets: OrderDirection
  canManageBrands: OrderDirection
  canEditBrandGuidelines: OrderDirection
  canApproveForBrand: OrderDirection
  canManageUsers: OrderDirection
  canAssignRoles: OrderDirection
  canViewAnalytics: OrderDirection
  canAccessAdminUI: OrderDirection
  canManageSystem: OrderDirection
  canViewAuditLogs: OrderDirection
}

input RoleUpdateInput {
  name: String
  description: String
  canCreateContent: Boolean
  canEditAllContent: Boolean
  canPublishContent: Boolean
  canDeleteContent: Boolean
  canUploadAssets: Boolean
  canEditAllAssets: Boolean
  canApproveAssets: Boolean
  canDeleteAssets: Boolean
  canManageBrands: Boolean
  canEditBrandGuidelines: Boolean
  canApproveForBrand: Boolean
  canManageUsers: Boolean
  canAssignRoles: Boolean
  canViewAnalytics: Boolean
  canAccessAdminUI: Boolean
  canManageSystem: Boolean
  canViewAuditLogs: Boolean
  assignedUsers: UserRelateToManyForUpdateInput
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  description: String
  canCreateContent: Boolean
  canEditAllContent: Boolean
  canPublishContent: Boolean
  canDeleteContent: Boolean
  canUploadAssets: Boolean
  canEditAllAssets: Boolean
  canApproveAssets: Boolean
  canDeleteAssets: Boolean
  canManageBrands: Boolean
  canEditBrandGuidelines: Boolean
  canApproveForBrand: Boolean
  canManageUsers: Boolean
  canAssignRoles: Boolean
  canViewAnalytics: Boolean
  canAccessAdminUI: Boolean
  canManageSystem: Boolean
  canViewAuditLogs: Boolean
  assignedUsers: UserRelateToManyForCreateInput
}

type Brand {
  id: ID!
  name: String
  description: String
  logo: ImageFieldOutput
  brandGuidelines: Brand_brandGuidelines_Document
  colorPalette: JSON
  typography: JSON
  isActive: Boolean
  isGlobal: Boolean
  departments(where: DepartmentWhereInput! = {}, orderBy: [DepartmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DepartmentWhereUniqueInput): [Department!]
  departmentsCount(where: DepartmentWhereInput! = {}): Int
  assets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  assetsCount(where: AssetWhereInput! = {}): Int
  content(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentCount(where: ContentWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  url: String!
  extension: ImageExtension!
  filesize: Int!
  width: Int!
  height: Int!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Brand_brandGuidelines_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BrandWhereUniqueInput {
  id: ID
  name: String
}

input BrandWhereInput {
  AND: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  isActive: BooleanFilter
  isGlobal: BooleanFilter
  departments: DepartmentManyRelationFilter
  assets: AssetManyRelationFilter
  content: ContentManyRelationFilter
}

input DepartmentManyRelationFilter {
  every: DepartmentWhereInput
  some: DepartmentWhereInput
  none: DepartmentWhereInput
}

input BrandOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  isActive: OrderDirection
  isGlobal: OrderDirection
}

input BrandUpdateInput {
  name: String
  description: String
  logo: ImageFieldInput
  brandGuidelines: JSON
  colorPalette: JSON
  typography: JSON
  isActive: Boolean
  isGlobal: Boolean
  departments: DepartmentRelateToManyForUpdateInput
  assets: AssetRelateToManyForUpdateInput
  content: ContentRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input DepartmentRelateToManyForUpdateInput {
  disconnect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  create: [DepartmentCreateInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input BrandUpdateArgs {
  where: BrandWhereUniqueInput!
  data: BrandUpdateInput!
}

input BrandCreateInput {
  name: String
  description: String
  logo: ImageFieldInput
  brandGuidelines: JSON
  colorPalette: JSON
  typography: JSON
  isActive: Boolean
  isGlobal: Boolean
  departments: DepartmentRelateToManyForCreateInput
  assets: AssetRelateToManyForCreateInput
  content: ContentRelateToManyForCreateInput
}

input DepartmentRelateToManyForCreateInput {
  create: [DepartmentCreateInput!]
  connect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
}

type Department {
  id: ID!
  name: String
  description: String
  isActive: Boolean
  brands(where: BrandWhereInput! = {}, orderBy: [BrandOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrandWhereUniqueInput): [Brand!]
  brandsCount(where: BrandWhereInput! = {}): Int
}

input DepartmentWhereUniqueInput {
  id: ID
  name: String
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  isActive: BooleanFilter
  brands: BrandManyRelationFilter
}

input BrandManyRelationFilter {
  every: BrandWhereInput
  some: BrandWhereInput
  none: BrandWhereInput
}

input DepartmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  isActive: OrderDirection
}

input DepartmentUpdateInput {
  name: String
  description: String
  isActive: Boolean
  brands: BrandRelateToManyForUpdateInput
}

input BrandRelateToManyForUpdateInput {
  disconnect: [BrandWhereUniqueInput!]
  set: [BrandWhereUniqueInput!]
  create: [BrandCreateInput!]
  connect: [BrandWhereUniqueInput!]
}

input DepartmentUpdateArgs {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateInput!
}

input DepartmentCreateInput {
  name: String
  description: String
  isActive: Boolean
  brands: BrandRelateToManyForCreateInput
}

input BrandRelateToManyForCreateInput {
  create: [BrandCreateInput!]
  connect: [BrandWhereUniqueInput!]
  set: [BrandWhereUniqueInput!]
}

type Asset {
  id: ID!
  title: String
  description: String
  assetType: AssetAssetTypeType
  file: FileFieldOutput
  image: ImageFieldOutput
  fileSize: Int
  dimensions: JSON
  approvalStatus: AssetApprovalStatusType
  approvalNotes: String
  approvedBy: User
  approvedAt: DateTime
  brand: Brand
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  keywords: String
  altText: String
  copyright: String
  downloadCount: Int
  lastDownloaded: DateTime
  uploadedBy: User
  usedInContent(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  usedInContentCount(where: ContentWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum AssetAssetTypeType {
  image
  video
  document
  audio
  archive
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

enum AssetApprovalStatusType {
  pending
  review
  approved
  rejected
  revision
}

input AssetWhereUniqueInput {
  id: ID
}

input AssetWhereInput {
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  assetType: AssetAssetTypeTypeNullableFilter
  fileSize: IntNullableFilter
  approvalStatus: AssetApprovalStatusTypeNullableFilter
  approvalNotes: StringFilter
  approvedBy: UserWhereInput
  approvedAt: DateTimeNullableFilter
  brand: BrandWhereInput
  tags: TagManyRelationFilter
  keywords: StringFilter
  altText: StringFilter
  copyright: StringFilter
  downloadCount: IntNullableFilter
  lastDownloaded: DateTimeNullableFilter
  uploadedBy: UserWhereInput
  usedInContent: ContentManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AssetAssetTypeTypeNullableFilter {
  equals: AssetAssetTypeType
  in: [AssetAssetTypeType!]
  notIn: [AssetAssetTypeType!]
  not: AssetAssetTypeTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AssetApprovalStatusTypeNullableFilter {
  equals: AssetApprovalStatusType
  in: [AssetApprovalStatusType!]
  notIn: [AssetApprovalStatusType!]
  not: AssetApprovalStatusTypeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input AssetOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  assetType: OrderDirection
  fileSize: OrderDirection
  approvalStatus: OrderDirection
  approvalNotes: OrderDirection
  approvedAt: OrderDirection
  keywords: OrderDirection
  altText: OrderDirection
  copyright: OrderDirection
  downloadCount: OrderDirection
  lastDownloaded: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AssetUpdateInput {
  title: String
  description: String
  assetType: AssetAssetTypeType
  file: FileFieldInput
  image: ImageFieldInput
  fileSize: Int
  dimensions: JSON
  approvalStatus: AssetApprovalStatusType
  approvalNotes: String
  approvedBy: UserRelateToOneForUpdateInput
  approvedAt: DateTime
  brand: BrandRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  keywords: String
  altText: String
  copyright: String
  downloadCount: Int
  lastDownloaded: DateTime
  uploadedBy: UserRelateToOneForUpdateInput
  usedInContent: ContentRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FileFieldInput {
  upload: Upload!
}

input BrandRelateToOneForUpdateInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input AssetUpdateArgs {
  where: AssetWhereUniqueInput!
  data: AssetUpdateInput!
}

input AssetCreateInput {
  title: String
  description: String
  assetType: AssetAssetTypeType
  file: FileFieldInput
  image: ImageFieldInput
  fileSize: Int
  dimensions: JSON
  approvalStatus: AssetApprovalStatusType
  approvalNotes: String
  approvedBy: UserRelateToOneForCreateInput
  approvedAt: DateTime
  brand: BrandRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  keywords: String
  altText: String
  copyright: String
  downloadCount: Int
  lastDownloaded: DateTime
  uploadedBy: UserRelateToOneForCreateInput
  usedInContent: ContentRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BrandRelateToOneForCreateInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
}

type Content {
  id: ID!
  title: String
  slug: String
  contentType: ContentContentTypeType
  content: Content_content_Document
  excerpt: String
  status: ContentStatusType
  publishDate: DateTime
  expiryDate: DateTime
  brand: Brand
  metaTitle: String
  metaDescription: String
  author: User
  relatedAssets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  relatedAssetsCount(where: AssetWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  viewCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum ContentContentTypeType {
  article
  blog
  press
  product
  marketing
  social
  email
}

type Content_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum ContentStatusType {
  draft
  review
  approved
  published
  archived
}

input ContentWhereUniqueInput {
  id: ID
  slug: String
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  contentType: ContentContentTypeTypeNullableFilter
  excerpt: StringFilter
  status: ContentStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  expiryDate: DateTimeNullableFilter
  brand: BrandWhereInput
  metaTitle: StringFilter
  metaDescription: StringFilter
  author: UserWhereInput
  relatedAssets: AssetManyRelationFilter
  tags: TagManyRelationFilter
  viewCount: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ContentContentTypeTypeNullableFilter {
  equals: ContentContentTypeType
  in: [ContentContentTypeType!]
  notIn: [ContentContentTypeType!]
  not: ContentContentTypeTypeNullableFilter
}

input ContentStatusTypeNullableFilter {
  equals: ContentStatusType
  in: [ContentStatusType!]
  notIn: [ContentStatusType!]
  not: ContentStatusTypeNullableFilter
}

input ContentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  contentType: OrderDirection
  excerpt: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  expiryDate: OrderDirection
  metaTitle: OrderDirection
  metaDescription: OrderDirection
  viewCount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ContentUpdateInput {
  title: String
  slug: String
  contentType: ContentContentTypeType
  content: JSON
  excerpt: String
  status: ContentStatusType
  publishDate: DateTime
  expiryDate: DateTime
  brand: BrandRelateToOneForUpdateInput
  metaTitle: String
  metaDescription: String
  author: UserRelateToOneForUpdateInput
  relatedAssets: AssetRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  viewCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  title: String
  slug: String
  contentType: ContentContentTypeType
  content: JSON
  excerpt: String
  status: ContentStatusType
  publishDate: DateTime
  expiryDate: DateTime
  brand: BrandRelateToOneForCreateInput
  metaTitle: String
  metaDescription: String
  author: UserRelateToOneForCreateInput
  relatedAssets: AssetRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  viewCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Tag {
  id: ID!
  name: String
  category: TagCategoryType
  color: String
  description: String
  assets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  assetsCount(where: AssetWhereInput! = {}): Int
  content(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentCount(where: ContentWhereInput! = {}): Int
}

enum TagCategoryType {
  general
  topic
  industry
  product
  campaign
  format
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  category: TagCategoryTypeNullableFilter
  color: StringFilter
  description: StringFilter
  assets: AssetManyRelationFilter
  content: ContentManyRelationFilter
}

input TagCategoryTypeNullableFilter {
  equals: TagCategoryType
  in: [TagCategoryType!]
  notIn: [TagCategoryType!]
  not: TagCategoryTypeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  category: OrderDirection
  color: OrderDirection
  description: OrderDirection
}

input TagUpdateInput {
  name: String
  category: TagCategoryType
  color: String
  description: String
  assets: AssetRelateToManyForUpdateInput
  content: ContentRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  category: TagCategoryType
  color: String
  description: String
  assets: AssetRelateToManyForCreateInput
  content: ContentRelateToManyForCreateInput
}

type Question {
  id: ID!
  question: String
  answer: Question_answer_Document
  status: QuestionStatusType
  askedBy: User
  askedAt: DateTime
  answeredAt: DateTime
}

type Question_answer_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum QuestionStatusType {
  OPEN
  ANSWERED
  DEFERRED
}

input QuestionWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: IDFilter
  question: StringFilter
  status: QuestionStatusTypeNullableFilter
  askedBy: UserWhereInput
  askedAt: DateTimeNullableFilter
  answeredAt: DateTimeNullableFilter
}

input QuestionStatusTypeNullableFilter {
  equals: QuestionStatusType
  in: [QuestionStatusType!]
  notIn: [QuestionStatusType!]
  not: QuestionStatusTypeNullableFilter
}

input QuestionOrderByInput {
  id: OrderDirection
  question: OrderDirection
  status: OrderDirection
  askedAt: OrderDirection
  answeredAt: OrderDirection
}

input QuestionUpdateInput {
  question: String
  answer: JSON
  status: QuestionStatusType
  askedBy: UserRelateToOneForUpdateInput
  askedAt: DateTime
  answeredAt: DateTime
}

input QuestionUpdateArgs {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateInput!
}

input QuestionCreateInput {
  question: String
  answer: JSON
  status: QuestionStatusType
  askedBy: UserRelateToOneForCreateInput
  askedAt: DateTime
  answeredAt: DateTime
}

type AnalyticsEvent {
  id: ID!
  entityType: AnalyticsEventEntityTypeType
  entityId: String
  event: AnalyticsEventEventType
  userId: String
  userEmail: String
  metadata: JSON
  timestamp: DateTime
}

enum AnalyticsEventEntityTypeType {
  asset
  content
  user
  brand
}

enum AnalyticsEventEventType {
  view
  download
  share
  edit
  delete
  approve
  publish
}

input AnalyticsEventWhereUniqueInput {
  id: ID
}

input AnalyticsEventWhereInput {
  AND: [AnalyticsEventWhereInput!]
  OR: [AnalyticsEventWhereInput!]
  NOT: [AnalyticsEventWhereInput!]
  id: IDFilter
  entityType: AnalyticsEventEntityTypeTypeNullableFilter
  entityId: StringFilter
  event: AnalyticsEventEventTypeNullableFilter
  userId: StringFilter
  userEmail: StringFilter
  timestamp: DateTimeFilter
}

input AnalyticsEventEntityTypeTypeNullableFilter {
  equals: AnalyticsEventEntityTypeType
  in: [AnalyticsEventEntityTypeType!]
  notIn: [AnalyticsEventEntityTypeType!]
  not: AnalyticsEventEntityTypeTypeNullableFilter
}

input AnalyticsEventEventTypeNullableFilter {
  equals: AnalyticsEventEventType
  in: [AnalyticsEventEventType!]
  notIn: [AnalyticsEventEventType!]
  not: AnalyticsEventEventTypeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input AnalyticsEventOrderByInput {
  id: OrderDirection
  entityType: OrderDirection
  entityId: OrderDirection
  event: OrderDirection
  userId: OrderDirection
  userEmail: OrderDirection
  timestamp: OrderDirection
}

input AnalyticsEventUpdateInput {
  entityType: AnalyticsEventEntityTypeType
  entityId: String
  event: AnalyticsEventEventType
  userId: String
  userEmail: String
  metadata: JSON
  timestamp: DateTime
}

input AnalyticsEventUpdateArgs {
  where: AnalyticsEventWhereUniqueInput!
  data: AnalyticsEventUpdateInput!
}

input AnalyticsEventCreateInput {
  entityType: AnalyticsEventEntityTypeType
  entityId: String
  event: AnalyticsEventEventType
  userId: String
  userEmail: String
  metadata: JSON
  timestamp: DateTime
}

type AuditLog {
  id: ID!
  action: String
  entityType: String
  entityId: String
  userId: String
  userEmail: String
  userRole: String
  department: String
  changes: JSON
  ipAddress: String
  userAgent: String
  timestamp: DateTime
}

input AuditLogWhereUniqueInput {
  id: ID
}

input AuditLogWhereInput {
  AND: [AuditLogWhereInput!]
  OR: [AuditLogWhereInput!]
  NOT: [AuditLogWhereInput!]
  id: IDFilter
  action: StringFilter
  entityType: StringFilter
  entityId: StringFilter
  userId: StringFilter
  userEmail: StringFilter
  userRole: StringFilter
  department: StringFilter
  ipAddress: StringFilter
  userAgent: StringFilter
  timestamp: DateTimeFilter
}

input AuditLogOrderByInput {
  id: OrderDirection
  action: OrderDirection
  entityType: OrderDirection
  entityId: OrderDirection
  userId: OrderDirection
  userEmail: OrderDirection
  userRole: OrderDirection
  department: OrderDirection
  ipAddress: OrderDirection
  userAgent: OrderDirection
  timestamp: OrderDirection
}

input AuditLogUpdateInput {
  action: String
  entityType: String
  entityId: String
  userId: String
  userEmail: String
  userRole: String
  department: String
  changes: JSON
  ipAddress: String
  userAgent: String
  timestamp: DateTime
}

input AuditLogUpdateArgs {
  where: AuditLogWhereUniqueInput!
  data: AuditLogUpdateInput!
}

input AuditLogCreateInput {
  action: String
  entityType: String
  entityId: String
  userId: String
  userEmail: String
  userRole: String
  department: String
  changes: JSON
  ipAddress: String
  userAgent: String
  timestamp: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createBrand(data: BrandCreateInput!): Brand
  createBrands(data: [BrandCreateInput!]!): [Brand]
  updateBrand(where: BrandWhereUniqueInput!, data: BrandUpdateInput!): Brand
  updateBrands(data: [BrandUpdateArgs!]!): [Brand]
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteBrands(where: [BrandWhereUniqueInput!]!): [Brand]
  createDepartment(data: DepartmentCreateInput!): Department
  createDepartments(data: [DepartmentCreateInput!]!): [Department]
  updateDepartment(where: DepartmentWhereUniqueInput!, data: DepartmentUpdateInput!): Department
  updateDepartments(data: [DepartmentUpdateArgs!]!): [Department]
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteDepartments(where: [DepartmentWhereUniqueInput!]!): [Department]
  createAsset(data: AssetCreateInput!): Asset
  createAssets(data: [AssetCreateInput!]!): [Asset]
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset
  updateAssets(data: [AssetUpdateArgs!]!): [Asset]
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteAssets(where: [AssetWhereUniqueInput!]!): [Asset]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(where: ContentWhereUniqueInput!, data: ContentUpdateInput!): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createQuestion(data: QuestionCreateInput!): Question
  createQuestions(data: [QuestionCreateInput!]!): [Question]
  updateQuestion(where: QuestionWhereUniqueInput!, data: QuestionUpdateInput!): Question
  updateQuestions(data: [QuestionUpdateArgs!]!): [Question]
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestions(where: [QuestionWhereUniqueInput!]!): [Question]
  createAnalyticsEvent(data: AnalyticsEventCreateInput!): AnalyticsEvent
  createAnalyticsEvents(data: [AnalyticsEventCreateInput!]!): [AnalyticsEvent]
  updateAnalyticsEvent(where: AnalyticsEventWhereUniqueInput!, data: AnalyticsEventUpdateInput!): AnalyticsEvent
  updateAnalyticsEvents(data: [AnalyticsEventUpdateArgs!]!): [AnalyticsEvent]
  deleteAnalyticsEvent(where: AnalyticsEventWhereUniqueInput!): AnalyticsEvent
  deleteAnalyticsEvents(where: [AnalyticsEventWhereUniqueInput!]!): [AnalyticsEvent]
  createAuditLog(data: AuditLogCreateInput!): AuditLog
  createAuditLogs(data: [AuditLogCreateInput!]!): [AuditLog]
  updateAuditLog(where: AuditLogWhereUniqueInput!, data: AuditLogUpdateInput!): AuditLog
  updateAuditLogs(data: [AuditLogUpdateArgs!]!): [AuditLog]
  deleteAuditLog(where: AuditLogWhereUniqueInput!): AuditLog
  deleteAuditLogs(where: [AuditLogWhereUniqueInput!]!): [AuditLog]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  department: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  brand(where: BrandWhereUniqueInput!): Brand
  brands(where: BrandWhereInput! = {}, orderBy: [BrandOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrandWhereUniqueInput): [Brand!]
  brandsCount(where: BrandWhereInput! = {}): Int
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput! = {}, orderBy: [DepartmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DepartmentWhereUniqueInput): [Department!]
  departmentsCount(where: DepartmentWhereInput! = {}): Int
  asset(where: AssetWhereUniqueInput!): Asset
  assets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  assetsCount(where: AssetWhereInput! = {}): Int
  content(where: ContentWhereUniqueInput!): Content
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentsCount(where: ContentWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
  analyticsEvent(where: AnalyticsEventWhereUniqueInput!): AnalyticsEvent
  analyticsEvents(where: AnalyticsEventWhereInput! = {}, orderBy: [AnalyticsEventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnalyticsEventWhereUniqueInput): [AnalyticsEvent!]
  analyticsEventsCount(where: AnalyticsEventWhereInput! = {}): Int
  auditLog(where: AuditLogWhereUniqueInput!): AuditLog
  auditLogs(where: AuditLogWhereInput! = {}, orderBy: [AuditLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuditLogWhereUniqueInput): [AuditLog!]
  auditLogsCount(where: AuditLogWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: User
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  label: String!
  singular: String!
  plural: String!
  path: String!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  pageSize: Int!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  initialFilter: JSON
  isSingleton: Boolean!
  hideNavigation: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
}

type KeystoneAdminUIFieldMeta {
  key: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: JSON!
  isRequired: JSON!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: JSON!
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition!
  isRequired: JSON!
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
