// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String     @id @default(cuid())
  name                  String     @default("")
  email                 String     @unique @default("")
  password              String
  department            String     @default("")
  jobTitle              String     @default("")
  role                  Role?      @relation("User_role", fields: [roleId], references: [id])
  roleId                String?    @map("role")
  manager               User?      @relation("User_manager", fields: [managerId], references: [id])
  managerId             String?    @map("manager")
  reports               User[]     @relation("User_manager")
  isActive              Boolean    @default(true)
  lastLogin             DateTime?
  createdContent        Content[]  @relation("Content_author")
  uploadedAssets        Asset[]    @relation("Asset_uploadedBy")
  createdAt             DateTime?  @default(now())
  from_Asset_approvedBy Asset[]    @relation("Asset_approvedBy")
  from_Question_askedBy Question[] @relation("Question_askedBy")

  @@index([name])
  @@index([roleId])
  @@index([managerId])
}

model Role {
  id                     String  @id @default(cuid())
  name                   String  @unique @default("")
  description            String  @default("")
  canCreateContent       Boolean @default(false)
  canEditAllContent      Boolean @default(false)
  canPublishContent      Boolean @default(false)
  canDeleteContent       Boolean @default(false)
  canUploadAssets        Boolean @default(false)
  canEditAllAssets       Boolean @default(false)
  canApproveAssets       Boolean @default(false)
  canDeleteAssets        Boolean @default(false)
  canManageBrands        Boolean @default(false)
  canEditBrandGuidelines Boolean @default(false)
  canApproveForBrand     Boolean @default(false)
  canManageUsers         Boolean @default(false)
  canAssignRoles         Boolean @default(false)
  canViewAnalytics       Boolean @default(false)
  canAccessAdminUI       Boolean @default(true)
  canManageSystem        Boolean @default(false)
  canViewAuditLogs       Boolean @default(false)
  assignedUsers          User[]  @relation("User_role")
}

model Brand {
  id              String       @id @default(cuid())
  name            String       @unique @default("")
  description     String       @default("")
  logo_id         String?
  logo_extension  String?
  logo_filesize   Int?
  logo_width      Int?
  logo_height     Int?
  brandGuidelines Json
  colorPalette    Json?
  typography      Json?
  isActive        Boolean      @default(true)
  isGlobal        Boolean      @default(false)
  departments     Department[] @relation("Brand_departments")
  assets          Asset[]      @relation("Asset_brand")
  content         Content[]    @relation("Content_brand")
}

model Department {
  id          String  @id @default(cuid())
  name        String  @unique @default("")
  description String  @default("")
  isActive    Boolean @default(true)
  brands      Brand[] @relation("Brand_departments")
}

model Asset {
  id              String    @id @default(cuid())
  title           String    @default("")
  description     String    @default("")
  assetType       String
  file_filesize   Int?
  file_filename   String?
  image_id        String?
  image_extension String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  fileSize        Int?
  dimensions      Json?
  approvalStatus  String?   @default("pending")
  approvalNotes   String    @default("")
  approvedBy      User?     @relation("Asset_approvedBy", fields: [approvedById], references: [id])
  approvedById    String?   @map("approvedBy")
  approvedAt      DateTime?
  brand           Brand?    @relation("Asset_brand", fields: [brandId], references: [id])
  brandId         String?   @map("brand")
  tags            Tag[]     @relation("Asset_tags")
  keywords        String    @default("")
  altText         String    @default("")
  copyright       String    @default("")
  downloadCount   Int?      @default(0)
  lastDownloaded  DateTime?
  uploadedBy      User?     @relation("Asset_uploadedBy", fields: [uploadedById], references: [id])
  uploadedById    String?   @map("uploadedBy")
  usedInContent   Content[] @relation("Asset_usedInContent")
  createdAt       DateTime? @default(now())
  updatedAt       DateTime?

  @@index([approvedById])
  @@index([brandId])
  @@index([uploadedById])
}

model Content {
  id              String    @id @default(cuid())
  title           String    @default("")
  slug            String    @unique @default("")
  contentType     String
  content         Json
  excerpt         String    @default("")
  status          String?   @default("draft")
  publishDate     DateTime?
  expiryDate      DateTime?
  brand           Brand?    @relation("Content_brand", fields: [brandId], references: [id])
  brandId         String?   @map("brand")
  metaTitle       String    @default("")
  metaDescription String    @default("")
  author          User?     @relation("Content_author", fields: [authorId], references: [id])
  authorId        String?   @map("author")
  relatedAssets   Asset[]   @relation("Asset_usedInContent")
  tags            Tag[]     @relation("Content_tags")
  viewCount       Int?      @default(0)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime?

  @@index([brandId])
  @@index([authorId])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique @default("")
  category    String?   @default("general")
  color       String    @default("")
  description String    @default("")
  assets      Asset[]   @relation("Asset_tags")
  content     Content[] @relation("Content_tags")
}

model Question {
  id         String    @id @default(cuid())
  question   String    @default("")
  answer     Json
  status     String?   @default("OPEN")
  askedBy    User?     @relation("Question_askedBy", fields: [askedById], references: [id])
  askedById  String?   @map("askedBy")
  askedAt    DateTime? @default(now())
  answeredAt DateTime?

  @@index([askedById])
}

model AnalyticsEvent {
  id         String   @id @default(cuid())
  entityType String
  entityId   String   @default("")
  event      String
  userId     String   @default("")
  userEmail  String   @default("")
  metadata   Json?
  timestamp  DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String   @default("")
  entityType String   @default("")
  entityId   String   @default("")
  userId     String   @default("")
  userEmail  String   @default("")
  userRole   String   @default("")
  department String   @default("")
  changes    Json?
  ipAddress  String   @default("")
  userAgent  String   @default("")
  timestamp  DateTime @default(now())
}
