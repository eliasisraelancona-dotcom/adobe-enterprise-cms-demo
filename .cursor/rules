---
description: Auto-attach access enforcement guidance when editing schema or access
globs:
  - schema.ts
  - access.ts
  - keystone.ts
alwaysApply: false
---

When modifying lists or permissions:
- Enforce rules at the backend level in `schema.ts`:
  - Use `access` read/create/update/delete hooks with `isSignedIn`, `permissions`, and `rules` filters.
  - Example patterns:
    - Read: use `rules.canReadContent` / `rules.canReadAssets` for filtered access.
    - Update/Delete: allow if elevated permission; else restrict to owned/unapproved items via rule filter.
    - Create: gate with the relevant `permissions.canCreate...` or `permissions.canUploadAssets`.
- Keep Admin UI behavior consistent:
  - Mirror UI `hideCreate/hideDelete/fieldMode` to match backend access decisions.
- Ensure session shape supports decisions:
  - Keep `sessionData` in `keystone.ts` aligned with permission checks (role flags present).
- Test with seed roles/users to validate coverage across roles.

Reference files:
@schema.ts
@access.ts
@keystone.ts

---
description: Project working rules for Adobe Enterprise CMS
globs:
alwaysApply: true
---

- Root-cause bias
  - Prefer fixing underlying causes over symptom-level workarounds
- Summarization quality
  - Provide thorough, complete summaries; do not omit important details
- Architecture alignment
  - Follow existing patterns and file boundaries (Keystone config, lists, access rules, admin customizations)
- Access control
  - Favor backend enforcement via list `access` (read/create/update/delete & filter rules)
- Operational discipline
  - Use absolute paths for tool calls
  - Parallelize read-only discovery (search/reads) to speed up context gathering
- Coding & communication
  - Keep code edits concise; explanations detailed when summarizing
  - Use clear navigation of files/functions with backticks

@schema.ts
@access.ts
@keystone.ts

---
description: Adobe Enterprise CMS – Architecture overview (Keystone 6 + TS, Prisma, stateless sessions, storage, admin UI, lists, access rules)
globs:
alwaysApply: true
---

- Stack
  - Keystone 6 + TypeScript, SQLite (dev) via Prisma, Express extensions
  - Stateless sessions, email/password auth on `User`
  - GraphQL at `/api/graphql`; Playground in dev; introspection off in prod
- Server and storage
  - Static asset routes: `/assets/images|documents|videos` with security headers
  - Health `/health`, Metrics `/metrics`
  - Local storage configs: `images`, `documents`, `videos` with URL generators
- Admin UI
  - Access gated by `session.data.role.canAccessAdminUI`
  - Custom nav: `admin/components/CustomNavigation.tsx` adds “Org Chart”
  - Custom page: `admin/pages/org-chart.tsx` (Apollo query for `User.manager`/`reports`)
- Data model (lists in `schema.ts`)
  - `User`, `Role`, `Brand`, `Department`, `Asset`, `Content`, `Tag`, `AnalyticsEvent`, `AuditLog`
  - Key relationships: self-ref `User.manager/reports`, `Content.relatedAssets`, `Asset.brand`, etc.
  - Rich documents: `Brand.brandGuidelines`, `Content.content`
  - Workflows: Content status (draft→published), Asset approval (pending→approved)
  - Usage tracking: content `viewCount`, assets `downloadCount`, `lastDownloaded`
- Access control (`access.ts`)
  - `permissions`: boolean capabilities (content/assets/brands/users/system)
  - `rules`: filtered reads/updates for content, assets, users, brands
  - Note: Many lists currently have `access: allowAll`; backend enforcement can be wired via list access
- Seed data (`seed-data.ts`)
  - 7 roles, departments, 3 brands, 10 users (with org chart), tags, content, analytics events
- Keystone config (`keystone.ts`)
  - Auth/initFirstItem, server config (max upload 100MB), storage, UI gating, telemetry disabled

@keystone.ts
@schema.ts
@access.ts
@seed-data.ts
@admin/components/CustomNavigation.tsx
@admin/pages/org-chart.tsx

